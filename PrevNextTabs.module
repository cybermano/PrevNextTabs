<?php

/**
 * ProcessWire PrevNextTabs
 *
 * Add Previous and Next Page Links
 *
 * Portions of this module based on Page References Tab written by Niklas Lakanen
 *
 */

class PrevNextTabs extends WireData implements Module, ConfigurableModule {

	/**
	 * @var Page Page being edited
	 *
	 */
	private $editedPage;

	/**
	 * Return information about this module (required)
	 *
	 * @return array
	 *
	 */
	static public function getModuleInfo() {
		return array(
			'title'    => 'Prev/Next Tabs',
			'summary'  => 'Adds prev/next and first/last links (tabs) to page editor.',
			'version'  => '018',
			'author'   => 'Macrura',
			'autoload' => true
		);
	}


	protected static $configDefaults = array(
		'enabledTemplates' 	=> [],
		'uikit_location'  	=> 'top',
		'reno_location'		=> 'top',
	);

	/**
	 * Data as used by the get/set functions
	 *
	 */
	protected $data = array();

	/**
	 * __construct() is the right place to init config vars before they'll get populated
	 *
	 */
	public function __construct() {

		$configDefaults = self::$configDefaults;
		foreach($configDefaults as $key => $value) {
			$this->set($key, $value); 
		}
	}


	/**
	 * ready() is called when both PW's API is ready and $page object is initialized (for autoload modules!)
	 * Add the hook here to be able to skip it based on the template of the edited page.
	 *
	 */
	public function ready() {

		$this->ajaxSendData();

		// we're interested in page editor only
		if(wire('page')->process != 'ProcessPageEdit') return;

		// skip changing templates (only target the actual edit form)
		$id = (int)$this->input->get('id');
		if(!$id) return;

		// wire('page') would be the page with ProcessPageEdit
		// GET parameter id tells the page that's being edited
		$this->editedPage = wire('pages')->get($id);

		// don't even consider system templates
		if($this->editedPage->template->flags & Template::flagSystem) return;

        // if there's only the default admin theme, $user->admin_theme is not available
        $this->adminTheme = $this->user->admin_theme ? $this->user->admin_theme : $this->config->defaultAdminTheme;

		// hook only if the template of the edited page has been chosen
		if(in_array($this->editedPage->template->name, $this->enabledTemplates)) {

			$hookTabs = true;

			if($this->adminTheme == 'AdminThemeUikit' && $this->uikit_location == 'top') {
				$hookTabs = false;
				$this->addAssets();
				$this->addHookAfter('AdminThemeUikit::renderBreadcrumbs', $this, 'hookAddPrevNextBC');
			}

			if($this->adminTheme == 'AdminThemeReno' && $this->reno_location == 'top') {
				$hookTabs = false;
				$this->addAssets();
				$this->addHookAfter('Page::render', $this, 'hookAddPrevNextBC', array('priority'=>1000));
			}

			if($hookTabs) {
				$this->addHookAfter('ProcessPageEdit::getTabs', $this, 'hookAddPrevNext');
			}

		}

	}

	/**
	 * This method handles the ready() state 
	 * for ajax calls to get the urls for prev/next etc.
	 */
	public function ajaxSendData() {

		if($this->config->ajax && $this->input->get->prevNextTabs != '') {

			$id = $this->input->get->prevNextTabs;
			$this->editedPage = wire('pages')->get($id);

			$query = 'include=all, sort=' . $this->editedPage->parent->sortfield . ', parent='.$this->editedPage->parent;
			$next = $this->editedPage->next($query);
			$prev = $this->editedPage->prev($query);
			$first = $this->editedPage->parent->children('include=all')->first();
			$last = $this->editedPage->parent->children('include=all')->last();

			$a = [
				'next'  	 => $next->id,
				'nextTitle'  => wire('sanitizer')->unentities($next->title),
				'prev'		 => $prev->id,
				'prevTitle'  => wire('sanitizer')->unentities($prev->title),
				'first' 	 => $first->id,
				'firstTitle' => wire('sanitizer')->unentities($first->title),
				'last'  	 => $last->id,
				'lastTitle'  => wire('sanitizer')->unentities($last->title),
			];
			echo json_encode($a);
            exit;
        }

	}

	public function addAssets() {
		$this->config->styles->add($this->config->urls->siteModules .  __CLASS__ . '/' . __CLASS__ . ".css?v=" . time());
		$this->config->scripts->add($this->config->urls->siteModules .  __CLASS__ . '/' . __CLASS__ . ".js?v=" . time());
	}


	/**
	 * Standard Addition of Prev/Next Links to the WireTabs
	 * @param  HookEvent $event [The array of tabs for the page]
	 * @return [array]          [Tabs with the added links]
	 */
	public function hookAddPrevNext(HookEvent $event) {

		// add styles & init tooltip only if the links are to show
		$this->config->styles->add($this->config->urls->siteModules .  __CLASS__ . '/' . __CLASS__ . ".css?v=" . time());
		$this->config->scripts->add($this->config->urls->siteModules .  __CLASS__ . '/' . __CLASS__ . ".js?v=" . time());

		$tabs = $event->return;
		$event->replace = true;

		$pnTabs = array();

		$label = $this->_('Next');
		$labelLast = $this->_('Last');
		$labelFirst = $this->_('First');
		$id = $this->className() . 'Next';
		$a = "<a id='_ProcessPageEditNext' class='' target='_top' href='#' title='Loading...' data-action='this'>$label <i class='fa fa-spinner fa-spin'></i></a>"; 
		$a .= "<a id='_ProcessPageEditLast' class='d-none' target='_top' href='' title='Loading...' data-action='this'>$labelLast <i class='fa fa-spinner fa-spin'></i></a>"; 
        $a .= "<a id='_ProcessPageEditFirst' class='d-none' target='_top' href='' title='Loading...' data-action='this'><i class='fa fa-spinner fa-spin'></i> $labelFirst</a>";
		$pnTabs[$id] = $a;

		$label = $this->_('Prev');
		$id = $this->className() . 'Prev';
		$class = ' class="space-right"';
		$a = "<a id='_ProcessPageEditPrev' target='_top' href='#' title='Loading...' data-action='this'{$class}><i class='fa fa-spinner fa-spin'></i> $label</a>";
		$pnTabs[$id] = $a;

		if($this->wire('user')->admin_theme == 'AdminThemeUikit') {
			$pnTabs = array_reverse($pnTabs);
		}

		$tabs = array_merge($tabs,$pnTabs);
		$event->return = $tabs;

	}

	/**
	 * Add Prev/Next Links (Pagination) for UiKit & Reno
	 * Uikit: sets up a 4/4 grid and places the breadcrumbs in the 
	 * left 3/4 and the pagination links in the right 1/4
	 * @param  HookEvent $event [UiKit Breadcrumbs]
	 * @return [string]         [Markup for the breadcrumbs and prev/next pagination]
	 * Note - the spinners get replaced by arrows
	 * fa-angle-left
	 * fa-angle-right
	 */
	public function hookAddPrevNextBC(HookEvent $event) {
		
		$liClassPrev = 'uk-pagination-previous';
		$liClassNext = 'uk-pagination-next';

		if($this->wire('user')->admin_theme == 'AdminThemeReno') {
			$liClassPrev = 'pagination-previous';
			$liClassNext = 'pagination-next';
		}	

		$pnLinks = array();
		$label 		= $this->_('Prev');
		$url 		= '#';
		$title 		= 'Loading...';
		$a 			= "<li class='$liClassPrev'><a href='$url' title='$title' accesskey='<'><i class='fa fa-spinner fa-spin'></i> <span>$label</span></a></li>";
		$pnLinks[0] = $a;

		$label 		= $this->_('Next');
		$url 		= '#';
		$title 		= 'Loading...';
		$a 			= "<li class='$liClassNext'><a href='$url' title='$title' accesskey='>'><span>$label</span> <i class='fa fa-spinner fa-spin'></i></a></li>";
		$pnLinks[1] = $a;

		if($this->wire('user')->admin_theme == 'AdminThemeReno') {
			$links = '<div class="prev-next-links"><ul class="pagination">' . implode($pnLinks) . '</ul></div>'; //
			$event->return = str_replace('<div id="breadcrumbs">', $links . '<div id="breadcrumbs">',  $event->return);
		} else {
			$links = '<div class="uk-width-1-4 prev-next-links"><ul class="uk-pagination uk-float-right">' . implode($pnLinks) . '</ul></div>'; //
			$event->return = '<div class="uk-grid uk-margin-bottom"><div class="uk-width-3-4">' . str_replace('</ul>', '</ul></div>' . $links, $event->return) . '</div>';
		}

	}

	/**
	 * Return an InputfieldsWrapper of Inputfields used to configure the class
	 *
	 * @param array $data Array of config values indexed by field name
	 * @return InputfieldsWrapper
	 *
	 */
	public static function getModuleConfigInputfields(array $data) {

		// not sure if this is needed...
		// foreach(self::$configDefaults as $key => $value) {
		// 	if(!isset($data[$key])||$data[$key]=="") $data[$key] = $value;
		// }

		$wrapper = new InputfieldWrapper();

		$fieldEnabledTemplates = wire('modules')->get('InputfieldAsmSelect');
		$fieldEnabledTemplates->attr('name+id', 'enabledTemplates');
		$fieldEnabledTemplates->label = __('Enabled templates', __FILE__);
		$fieldEnabledTemplates->description = __('"Prev/Next" tabs/links will be shown only for the templates selected.', __FILE__);
		$fieldEnabledTemplates->attr('title', __('Enable template', __FILE__));
		$fieldEnabledTemplates->setAsmSelectOption('sortable', false);

		// populate with all available templates
		foreach(wire('templates') as $t) {
			// filter out system templates
			if(!($t->flags & Template::flagSystem)) $fieldEnabledTemplates->addOption($t->name);
		}
		if(isset($data['enabledTemplates'])) $fieldEnabledTemplates->value = $data['enabledTemplates'];

		$wrapper->add($fieldEnabledTemplates);

		//--- UiKit Placement Preference ---//
		$f = wire('modules')->get('InputfieldRadios'); 
		$f->attr('name', __('uikit_location'));
		$f->label = __('UiKit Placement');
		if(!isset($data['uikit_location'])) $data['uikit_location'] = 'top';
		$f->description = __('For users who are on the UiKit admin theme, you can have the pagination links at the top.');
		$f->addOption('top', __('Top â€“ Right of Breadcrumbs'), ($data['uikit_location'] == 'top') ? array('selected'=>'selected') : null);
		$f->addOption('tabs',__('In Page Tabs, Right Side (old skool)'), ($data['uikit_location'] == 'tabs') ? array('selected'=>'selected') : null );
		$wrapper->add($f);

		//--- Reno Placement Preference ---//
		$f = wire('modules')->get('InputfieldRadios'); 
		$f->attr('name', __('reno_location'));
		$f->label = __('Reno Placement'); 
		$f->description = __('For users who are on the Reno admin theme, you can have the pagination at the top.');
		if(!isset($data['reno_location'])) $data['reno_location'] = 'top';
		$f->addOption('top', __('Top â€“ Right of Breadcrumbs'), ($data['reno_location'] == 'top') ? array('selected'=>'selected') : null);
		$f->addOption('tabs',__('In Page Tabs, Right Side (old skool)'), ($data['reno_location'] == 'tabs') ? array('selected'=>'selected') : null);
		$wrapper->add($f);

		return $wrapper;

	}

}
